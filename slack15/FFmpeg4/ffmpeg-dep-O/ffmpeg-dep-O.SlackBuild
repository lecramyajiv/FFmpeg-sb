#!/bin/bash

# Slackware build script for ffmpeg-dep-O

# Copyright 2025 Vijay Marcel
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=ffmpeg-dep-O
VERSION=${VERSION:-1.0}
BUILD=${BUILD:-3}
TAG=${TAG:-_SBo}
PKGTYPE=${PKGTYPE:-tgz}
nprocr=$(expr $(nproc))
sys_arch=${sys_arch:-$(uname -m)}

# Dependency name
# DevIL
devnam=${devnam:-DevIL}
devver=${devver:-1.8.0}
# Soundtouch
sdtnam=${sdtnam:-soundtouch}
sdtver=${sdtver:-2.4.0}
# Cargo-c
carcnam=${carcnam:-cargo-c}
carcver=${carcver:-0.10.13}

case "$sys_arch" in
   	x86_64) export ARCH=x86_64 ;;
	     *) echo "This SlackBuild will not run on $sys_arch platform" && exit 1 ;;
esac


if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

if [ "$ARCH" = "x86_64" ]; then
  LIBDIRSUFFIX="64"
  PFLAGS="-fno-delete-null-pointer-checks -Wno-incompatible-pointer-types"
  PXXFLAGS="-fno-delete-null-pointer-checks"
  ARCHFLAGS="-march=x86-64 -mtune=native -pipe -ffunction-sections -fdata-sections -O2 -fPIC"
  GCFLAGS="-Wl,--sort-common=ascending -Wl,--sort-section=alignment -Wl,--gc-sections -Wl,-z,unique-symbol"
  SLKCFLAGS="$ARCHFLAGS $PFLAGS"
  SLKCXXFLAGS="$ARCHFLAGS $PXXFLAGS"
  SLDFLAGS="$GCFLAGS"
else  echo "this slackbuild will work only on $ARCH" && exit 1
fi

export m=/opt/meson/bin # meson path
export r=/opt/rust/bin # rust path
export rl=/opt/rust/lib64

PYVER=$(python3 -c 'import sys; print("%d.%d" % sys.version_info[:2])')
export PYTHONPATH=/opt/python$PYVER/site-packages
export PATH=$m:$r:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$rl

set -e
trap 'echo "$0 FAILED at line $LINENO!" | tee -a $OUTPUT/error-${PRGNAM}.log' ERR

export CC=${CC:-gcc}
export CXX=${CXX:-g++}
export CFLAGS="$SLKCFLAGS"
export CXXFLAGS="$SLKCXXFLAGS"
export LDFLAGS="$SLDFLAGS"

rm -rf $PKG
mkdir -pv $TMP $PKG $OUTPUT
mkdir -pv $PKG/usr/doc/$PRGNAM-$VERSION

cd $TMP

# Building soundtouch

rm -rf $sdtnam-$sdtver
rm -rf $sdtnam
rm -rf $sdtver
tar xvf $CWD/$sdtver.tar.gz || tar xvf $CWD/$sdtnam-$sdtver.tar.gz
cd $sdtnam
# Remove the dangling symlink
rm -rvf ./source/SoundTouchDLL/LazarusTest/libSoundTouchDll.so
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

cmake -B build -S $TMP/$sdtnam \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCXXFLAGS" \
    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCXXFLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS:STRING="$SLDFLAGS" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DCMAKE_INSTALL_LIBDIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DCMAKE_INSTALL_BINDIR:PATH=/usr/bin \
    -DCMAKE_INSTALL_MANDIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_SHARED_LIBS=ON \
    -DSOUNDSTRETCH=ON \
    -DSOUNDTOUCH_DLL=ON

cmake --build build --parallel $nprocr
DESTDIR=$PKG cmake --install build

rm -f $PKG/usr/lib${LIBDIRSUFFIX}/*.la

mkdir -pv $PKG/usr/doc/$PRGNAM-$VERSION/$sdtnam-$sdtver
cp -av readme.md COPYING.TXT $PKG/usr/doc/$PRGNAM-$VERSION/$sdtnam-$sdtver

cd $TMP

# Building DevIL

rm -rf $devnam-$devver
tar xvf $CWD/$devnam-$devver.tar.gz
cd $devnam
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

patch -p1 < $CWD/patches/lib64.diff

cmake -B build -S $TMP/$devnam/$devnam \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS -fpermissive" \
    -DCMAKE_CXX_FLAGS:STRING="$SLKCXXFLAGS -std=c++14 -fpermissive" \
    -DCMAKE_C_FLAGS_RELEASE:STRING="$SLKCFLAGS -fpermissive" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="$SLKCXXFLAGS -std=c++14 -fpermissive" \
    -DCMAKE_EXE_LINKER_FLAGS:STRING="$SLDFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_INSTALL_BINDIR=/usr/bin \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DIL_USE_DXTC_NVIDIA=NO \
    -DCMAKE_BUILD_TYPE=Release

cmake --build build --parallel $nprocr
DESTDIR=$PKG cmake --install build

rm -f $PKG/usr/lib${LIBDIRSUFFIX}/*.la

mkdir -pv $PKG/usr/doc/$PRGNAM-$VERSION/$devnam-$devver
cp -a LICENSE README.md DevIL/CREDITS $PKG/usr/doc/$PRGNAM-$VERSION/$devnam-$devver

cd $TMP

# Building cargo-c

rm -rf $carcnam-$carcver
tar xvf $CWD/$carcnam-$carcver.tar.gz
cd $carcnam-$carcver
chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \+ -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \+

# Target Architecture
TARGET="$(rustc -vV | sed -n 's/host: //p')"
# set cargo_home dir in the build dir were the crates will be downloaded otherwise it will be downloaded in
# root's home
mkdir -pv ".cargo"
export CARGO_HOME=".cargo"

cat $CWD/Cargo.lock > $TMP/$carcnam-$carcver/Cargo.lock

# Download the crates
cargo fetch --locked --target $TARGET --manifest-path $TMP/$carcnam-$carcver/Cargo.toml
# Build
cargo build --frozen --release --manifest-path $TMP/$carcnam-$carcver/Cargo.toml

mkdir -pv $PKG/usr/bin

install -Dvm755 target/release/cargo-{capi,cbuild,cinstall,ctest} -t $PKG/usr/bin


# Cleanup CARGO_HOME and possible unnecessary artifacts in $PKG.
rm -rf "$CARGO_HOME" "$PKG/usr/.cargo" "$PKG/usr/.crates*"

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION/$carcnam-$carcver
cp -a README.md LICENSE  $PKG/usr/doc/$PRGNAM-$VERSION/$carcnam-$carcver

cd $TMP

find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded --remove-section=.comment --remove-section=.note 2> /dev/null || true

cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
find $PKG/usr/lib${LIBDIRSUFFIX} -type f -exec chmod 0755 {} \+
find $PKG/usr/doc/$PRGNAM-$VERSION -type f -exec chmod 0644 {} \+

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg -l y -c n --remove-rpaths --remove-tmp-rpaths --threads 5 $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
